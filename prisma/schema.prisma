generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                     String               @id @default(cuid())
  userId                 String
  type                   String
  provider               String
  providerAccountId      String
  password               String?
  emailVerified          DateTime?
  emailVerificationToken String?
  access_token           String?
  email                  String               @unique
  expires_at             Int?
  id_token               String?
  refresh_token          String?
  scope                  String?
  session_state          String?
  token_type             String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  resetPasswordTokens    ResetPasswordToken[]

  @@unique([provider, providerAccountId])
  @@index([email])
  @@map("accounts")
}

model ResetPasswordToken {
  id        String    @id @default(cuid())
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  accountId String
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("reset_password_tokens")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  image          String?
  accounts       Account[]
  JobApplication JobApplication[]
  sessions       Session[]

  @@map("users")
}

model Job {
  id               String           @id @default(cuid())
  slug             String           @unique
  title            String
  type             String
  locationType     String
  location         String?
  description      String?
  companyName      String
  applicationEmail String?
  applicationUrl   String?
  companyLogoUrl   String?
  approved         Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  applicantCount   Int              @default(0)
  salary           Int
  applications     JobApplication[]
  categories       JobCategory[]

  @@map("jobs")
}

model JobApplication {
  id          String            @id @default(cuid())
  userId      String
  jobId       String
  coverLetter String?
  resume      String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  job         Job               @relation(fields: [jobId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@index([jobId])
  @@index([userId])
  @@map("job_applications")
}

model Category {
  id   String        @id @default(cuid())
  name String        @unique
  jobs JobCategory[]

  @@map("categories")
}

model JobCategory {
  jobId      String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  job        Job      @relation(fields: [jobId], references: [id])

  @@id([jobId, categoryId])
  @@index([categoryId])
  @@map("job_categories")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  USER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  REJECTED
  ACCEPTED
}
