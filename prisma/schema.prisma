// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(cuid())
  name         String
  email        String
  role         Role             @default(USER)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications JobApplication[]

  @@index([email])
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Job {
  id               String           @id @default(cuid())
  slug             String           @unique
  title            String
  type             String
  locationType     String
  location         String?
  description      String?
  salary           Int
  companyName      String
  applicationEmail String?
  applicationUrl   String?
  companyLogoUrl   String?
  approved         Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  applications     JobApplication[]
  categories       JobCategory[]
  applicantCount   Int              @default(0)

  @@map("jobs")
}

model JobApplication {
  id          String            @id @default(cuid())
  userId      String
  jobId       String
  coverLetter String?
  resume      String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  job         Job               @relation(fields: [jobId], references: [id])

  @@index([jobId])
  @@index([userId])
  @@map("job_applications")
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  REJECTED
  ACCEPTED
}

model Category {
  id   String        @id @default(cuid())
  name String        @unique
  jobs JobCategory[]

  @@map("categories")
}

model JobCategory {
  jobId      String
  categoryId String
  job        Job      @relation(fields: [jobId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([jobId, categoryId])
  @@index([categoryId])
  @@map("job_categories")
}
